//
//  FBKVOController+Asyn.swift
//  CloudOffice
//
//  Created by 王珊 on 3/17/16.
//  Copyright © 2016 115.com. All rights reserved.
//

import UIKit

typealias KVONotificationBlock = (Any?, _ oldValue: Any?, _ value: Any?) -> Void

extension NSObject {
    
    /// 添加KVO，默认的函数，option的初始值是Initial|New, 监测打变化的值默认转到主线程
    ///
    /// - Parameters:
    ///   - object: 目标对象
    ///   - keyPath: 监测的路径
    ///   - block: 监测到数据变化的回调
    func observe(_ object: Any?, keyPath: String, block: @escaping KVONotificationBlock) {
        self.kvoController.observe(object, keyPath: keyPath, options:[.initial, .old, .new], block:{(observer: Any?, object: Any, change: [String : Any]) in
            dispatch_async_main_safe {
                block(observer, change[NSKeyValueChangeKey.oldKey.rawValue], change[NSKeyValueChangeKey.newKey.rawValue]);
            }
        })
    }
    
    /// 添加KVO
    ///
    /// - Parameters:
    ///   - object: 目标对象
    ///   - keyPath: 监测的路径
    ///   - options: 监听的类型
    ///   - mainThread: 是否要在主线程
    ///   - block: 监测到数据变化的回调
    func observe(_ object: Any?, keyPath: String, options: NSKeyValueObservingOptions, mainThread: Bool, block: @escaping KVONotificationBlock) {
        self.kvoController.observe(object, keyPath: keyPath, options: options) { (observer, object, change: [String : Any]) -> Void in
            if !mainThread || Thread.isMainThread == true  {
                block(observer, change[NSKeyValueChangeKey.oldKey.rawValue], change[NSKeyValueChangeKey.newKey.rawValue]);
            } else {
                dispatch_async_main_safe({ () -> Void in
                    block(observer, change[NSKeyValueChangeKey.oldKey.rawValue], change[NSKeyValueChangeKey.newKey.rawValue]);
                })
            }
        }
    }
    
    /// 移除某个kakpath的监测
    ///
    /// - Parameters:
    ///   - object: 目标对象
    ///   - path: 监测路径
    func removeObserve(_ object: Any?, path: String) {
        self.kvoController.unobserve(object, keyPath: path);
    }
    
    /// 移除某个对象的监测
    ///
    /// - Parameter obj: 目标对象
    func removeObserve(_ obj: Any?) {
        self.kvoController.unobserve(obj);
    }
    
    /// 移除这个类所有的KVO
    func removeAll() {
        self.kvoController.unobserveAll();
    }
}
