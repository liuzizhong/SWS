//  ImageRow.swift
//  Eureka ( https://github.com/xmartlabs/Eureka )
//
//  Copyright (c) 2016 Xmartlabs SRL ( http://xmartlabs.com )
//
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import Foundation

public enum ImageRowActionType: Int {
    case photoLibrary
    case camera
//    case viewAvatar
}

public struct ImageRowActionTypes : OptionSet {
    
    public let rawValue: Int
    public var imageRowActionTypeRawValue: Int { return self.rawValue >> 1 }
    
    public init(rawValue: Int) { self.rawValue = rawValue }
    init(_ sheetType: ImageRowActionType) { self.init(rawValue: 1 << sheetType.rawValue) }
    
    public static let PhotoLibrary  = ImageRowActionTypes(.photoLibrary)
    public static let Camera  = ImageRowActionTypes(.camera)
//    public static let ViewAvatar = ImageRowActionTypes(.viewAvatar)
    public static let All: ImageRowActionTypes = [Camera, PhotoLibrary]
    
}

extension ImageRowActionTypes {
    
// MARK: Helpers
    
    var localizedString: String {
        switch self {
        case ImageRowActionTypes.Camera:
            return NSLocalizedString("拍摄", comment: "")
        case ImageRowActionTypes.PhotoLibrary:
            return NSLocalizedString("从手机相册选择", comment: "")
//        case ImageRowActionTypes.ViewAvatar:
//            return NSLocalizedString("查看头像", comment: "")
        default:
            return ""
        }
    }
}
//MARK: Row

open class _ImageRow<Cell: CellType>: OptionsRow<Cell> where Cell: BaseCell, Cell.Value == UIImage {
    
    var callbackSelectedAction: ((_ imageRowActionType: ImageRowActionTypes)-> Void)?
    
    public func selectedAction(_ callback: @escaping ((_ imageRowActionType: ImageRowActionTypes) -> ())) -> Self {
        callbackSelectedAction = { imageRowActionType in  callback(imageRowActionType) }
        return self
    }
    
    var sourceActionSheet = UIAlertController()
    
//    open var canViewAvatat = true

    let imageWight: CGFloat = 54
    
    open var actionTypes: ImageRowActionTypes

    open internal(set) var imageURL: URL?
    
    public required init(tag: String?) {
        actionTypes = .All
        super.init(tag: tag)
        self.displayValueFor = nil
        
    }
    
    open override func customDidSelect() {
        guard !isDisabled else {
            super.customDidSelect()
            return
        }
        deselect()
        var availableAction: ImageRowActionTypes = []
            
        if UIImagePickerController.isSourceTypeAvailable(.photoLibrary) {
            let _ = availableAction.insert(.PhotoLibrary)
        }
        if UIImagePickerController.isSourceTypeAvailable(.camera) {
            let _ = availableAction.insert(.Camera)
        }
//        if canViewAvatat {
//            let _ = availableAction.insert(.ViewAvatar)
//        }

        actionTypes.formIntersection(availableAction)
        
        if actionTypes.isEmpty {
            super.customDidSelect()
            return
        }
        
        // now that we know the number of actions aren't empty
        sourceActionSheet = UIAlertController(title: nil, message: selectorTitle, preferredStyle: .actionSheet)
        
        guard let tableView = cell.formViewController()?.tableView  else { fatalError() }
        if let popView = sourceActionSheet.popoverPresentationController {
            popView.sourceView = tableView
            popView.sourceRect = tableView.convert(cell.accessoryView?.frame ?? cell.contentView.frame, from: cell)
        }
        createOptionsForAlertController(sourceActionSheet)
        let cancelOption = UIAlertAction(title: NSLocalizedString("取消", comment: ""), style: .cancel, handler:nil)
        sourceActionSheet.addAction(cancelOption)
        
        if let presentingViewController = cell.formViewController() {
            presentingViewController.present(sourceActionSheet, animated: true)
        }
    }

    open lazy var imageView: UIImageView = {
        let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: imageWight, height: imageWight))
        imageView.contentMode = .scaleAspectFill
        imageView.layer.cornerRadius = imageWight/2
        imageView.clipsToBounds = true
        return imageView
    }()
    
    open override func customUpdateCell() {
        super.customUpdateCell()
        cell.accessoryType = .none
//        if let image = self.value {
//            imageView.image = value
            cell.addSubview(imageView)
            imageView.frame = CGRect(x: UIScreen.main.bounds.width - imageWight - 15, y: 10, width: imageWight, height: imageWight)
//        }
//        else{
//            cell.accessoryView = nil
//        }
    }
    

}

extension _ImageRow {
    
//MARK: Helpers
    
    func createOptionForAlertController(_ alertController: UIAlertController, actionType: ImageRowActionTypes) {
        guard actionTypes.contains(actionType) else { return }
        
        let option = UIAlertAction(title: NSLocalizedString(actionType.localizedString, comment: ""), style: .default, handler: { [weak self] _ in
            self?.callbackSelectedAction?(actionType)
        })
        alertController.addAction(option)
    }
    
    func createOptionsForAlertController(_ alertController: UIAlertController) {
        createOptionForAlertController(alertController, actionType: .Camera)
        createOptionForAlertController(alertController, actionType: .PhotoLibrary)
//        createOptionForAlertController(alertController, actionType: .ViewAvatar)
    }
}

/// A selector row where the user can pick an image
public final class ImageRow : _ImageRow<PushSelectorCell<UIImage>>, RowType {
    public required init(tag: String?) {
        super.init(tag: tag)
    }
}

